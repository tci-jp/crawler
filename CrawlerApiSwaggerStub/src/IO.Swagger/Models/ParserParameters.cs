/*
 * Crawler API
 *
 * API for crawling web pages and searching in crowled result
 *
 * OpenAPI spec version: 1.0.0
 * Contact: zakhar_amirov@dectech.tokyo
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ParserParameters :  IEquatable<ParserParameters>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParserParameters" /> class.
        /// </summary>
        /// <param name="OwnerId">owner id (required).</param>
        /// <param name="ParserId">parser id in free text unique for specified owner (required).</param>
        /// <param name="UseRDFa">use RDFa attributes for parsing metadata. (default to true).</param>
        /// <param name="UseMicrodata">use Microdata attributes for parsing metadata (default to true).</param>
        /// <param name="CustomFields">CustomFields (required).</param>
        public ParserParameters(string OwnerId = null, string ParserId = null, bool? UseRDFa = null, bool? UseMicrodata = null, List<ParserParametersCustomFields> CustomFields = null)
        {
            // to ensure "OwnerId" is required (not null)
            if (OwnerId == null)
            {
                throw new InvalidDataException("OwnerId is a required property for ParserParameters and cannot be null");
            }
            else
            {
                this.OwnerId = OwnerId;
            }
            // to ensure "ParserId" is required (not null)
            if (ParserId == null)
            {
                throw new InvalidDataException("ParserId is a required property for ParserParameters and cannot be null");
            }
            else
            {
                this.ParserId = ParserId;
            }
            // to ensure "CustomFields" is required (not null)
            if (CustomFields == null)
            {
                throw new InvalidDataException("CustomFields is a required property for ParserParameters and cannot be null");
            }
            else
            {
                this.CustomFields = CustomFields;
            }
            // use default value if no "UseRDFa" provided
            if (UseRDFa == null)
            {
                this.UseRDFa = true;
            }
            else
            {
                this.UseRDFa = UseRDFa;
            }
            // use default value if no "UseMicrodata" provided
            if (UseMicrodata == null)
            {
                this.UseMicrodata = true;
            }
            else
            {
                this.UseMicrodata = UseMicrodata;
            }
            
        }

        /// <summary>
        /// owner id
        /// </summary>
        /// <value>owner id</value>
        [DataMember(Name="ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// parser id in free text unique for specified owner
        /// </summary>
        /// <value>parser id in free text unique for specified owner</value>
        [DataMember(Name="parserId")]
        public string ParserId { get; set; }

        /// <summary>
        /// use RDFa attributes for parsing metadata.
        /// </summary>
        /// <value>use RDFa attributes for parsing metadata.</value>
        [DataMember(Name="useRDFa")]
        public bool? UseRDFa { get; set; }

        /// <summary>
        /// use Microdata attributes for parsing metadata
        /// </summary>
        /// <value>use Microdata attributes for parsing metadata</value>
        [DataMember(Name="useMicrodata")]
        public bool? UseMicrodata { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields")]
        public List<ParserParametersCustomFields> CustomFields { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParserParameters {\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  ParserId: ").Append(ParserId).Append("\n");
            sb.Append("  UseRDFa: ").Append(UseRDFa).Append("\n");
            sb.Append("  UseMicrodata: ").Append(UseMicrodata).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((ParserParameters)obj);
        }

        /// <summary>
        /// Returns true if ParserParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of ParserParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParserParameters other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.OwnerId == other.OwnerId ||
                    this.OwnerId != null &&
                    this.OwnerId.Equals(other.OwnerId)
                ) && 
                (
                    this.ParserId == other.ParserId ||
                    this.ParserId != null &&
                    this.ParserId.Equals(other.ParserId)
                ) && 
                (
                    this.UseRDFa == other.UseRDFa ||
                    this.UseRDFa != null &&
                    this.UseRDFa.Equals(other.UseRDFa)
                ) && 
                (
                    this.UseMicrodata == other.UseMicrodata ||
                    this.UseMicrodata != null &&
                    this.UseMicrodata.Equals(other.UseMicrodata)
                ) && 
                (
                    this.CustomFields == other.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(other.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OwnerId != null)
                    hash = hash * 59 + this.OwnerId.GetHashCode();
                if (this.ParserId != null)
                    hash = hash * 59 + this.ParserId.GetHashCode();
                if (this.UseRDFa != null)
                    hash = hash * 59 + this.UseRDFa.GetHashCode();
                if (this.UseMicrodata != null)
                    hash = hash * 59 + this.UseMicrodata.GetHashCode();
                if (this.CustomFields != null)
                    hash = hash * 59 + this.CustomFields.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(ParserParameters left, ParserParameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ParserParameters left, ParserParameters right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
