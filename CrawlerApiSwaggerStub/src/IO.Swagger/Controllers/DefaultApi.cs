/*
 * Crawler API
 *
 * API for crawling web pages and searching in crowled result
 *
 * OpenAPI spec version: 1.0.0
 * Contact: zakhar_amirov@dectech.tokyo
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class DefaultApiController : Controller
    { 

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>adds or replaces metadata parsing parameters</remarks>
        /// <param name="parserParameters"></param>
        /// <response code="200">parser added</response>
        /// <response code="400">invalid parameters</response>
        [HttpPost]
        [Route("/zakhar_amirov/CrawlerApi/1.0.0/parser")]
        [SwaggerOperation("AddParser")]
        public virtual void AddParser([FromBody]ParserParameters parserParameters)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// 
        /// </summary>
        /// <remarks>get list of crawling sessions information by list of ids</remarks>
        /// <param name="sessionsRequestParameters">sessions request</param>
        /// <response code="200">list of selected sessions information</response>
        /// <response code="400">wrong parameters</response>
        [HttpGet]
        [Route("/zakhar_amirov/CrawlerApi/1.0.0/incite")]
        [SwaggerOperation("GetIncites")]
        [SwaggerResponse(200, type: typeof(Session))]
        public virtual IActionResult GetIncites([FromBody]SessionsRequestParameters sessionsRequestParameters)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Session>(exampleJson)
            : default(Session);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        /// <remarks>download crawled page</remarks>
        /// <param name="getPageParameters"></param>
        /// <response code="200">responce with page content</response>
        /// <response code="400">invalid input</response>
        [HttpGet]
        [Route("/zakhar_amirov/CrawlerApi/1.0.0/page")]
        [SwaggerOperation("GetPage")]
        [SwaggerResponse(200, type: typeof(System.IO.Stream))]
        public virtual IActionResult GetPage([FromBody]GetPageParameters getPageParameters)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        /// <remarks>get metadata parsing parameters set</remarks>
        /// <param name="parserParameters"></param>
        /// <response code="200">parsers collection</response>
        /// <response code="400">invalid parameters</response>
        [HttpGet]
        [Route("/zakhar_amirov/CrawlerApi/1.0.0/parser")]
        [SwaggerOperation("GetParsers")]
        [SwaggerResponse(200, type: typeof(ParsersRequestParameters))]
        public virtual IActionResult GetParsers([FromBody]List<ParserParameters> parserParameters)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ParsersRequestParameters>(exampleJson)
            : default(ParsersRequestParameters);
            return new ObjectResult(example);
        }


        /// <summary>
        /// 
        /// </summary>
        /// <remarks>starts crawling</remarks>
        /// <param name="configuration">crawler configuration</param>
        /// <response code="200">crawling started</response>
        /// <response code="400">invalid input</response>
        [HttpPost]
        [Route("/zakhar_amirov/CrawlerApi/1.0.0/incite")]
        [SwaggerOperation("Incite")]
        [SwaggerResponse(200, type: typeof(string))]
        public virtual IActionResult Incite([FromBody]CrawlerConfiguration configuration)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            return new ObjectResult(example);
        }
    }
}
