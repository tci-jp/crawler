// <copyright file="ParserParameters.cs" company="DECTech.Tokyo">
// Copyright (c) DECTech.Tokyo. All rights reserved.
// </copyright>

/*
 * Crawler API
 *
 * API for crawling web pages and searching in crowled result
 *
 * OpenAPI spec version: 1.0.0
 * Contact: zakhar_amirov@dectech.tokyo
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace CrawlerApi.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.IO;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;
    using Azure.Storage;
    using Microsoft.WindowsAzure.Storage.Table;
    using Newtonsoft.Json;

    /// <summary>
    /// Parameters for parsing pages.
    /// </summary>
    [DataContract]
    [Table("parserParameters")]
    public class ParserParameters : ComplexTableEntity, IEquatable<ParserParameters>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParserParameters" /> class.
        /// </summary>
        public ParserParameters()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ParserParameters" /> class.
        /// </summary>
        /// <param name="ownerId">owner id (required).</param>
        /// <param name="parserId">parser id in free text unique for specified owner (required).</param>
        public ParserParameters(
            string ownerId = null,
            string parserId = null)
            : base(ownerId, parserId)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ParserParameters" /> class.
        /// </summary>
        /// <param name="ownerId">owner id (required).</param>
        /// <param name="parserId">parser id in free text unique for specified owner (required).</param>
        /// <param name="useRdFa">use RDFa attributes for parsing metadata. (default to true).</param>
        /// <param name="useMicrodata">use Microdata attributes for parsing metadata (default to true).</param>
        /// <param name="customFields">CustomFields (required).</param>
        public ParserParameters(
            string ownerId = null,
            string parserId = null,
            bool? useRdFa = null,
            bool? useMicrodata = null,
            List<ParserParametersCustomFields> customFields = null)
            : base(ownerId, parserId)
        {
            // to ensure "OwnerId" is required (not null)
            if (OwnerId == null)
            {
                throw new InvalidDataException(
                    "OwnerId is a required property for ParserParameters and cannot be null");
            }

            // to ensure "ParserId" is required (not null)
            if (ParserId == null)
            {
                throw new InvalidDataException(
                    "ParserId is a required property for ParserParameters and cannot be null");
            }

            // to ensure "CustomFields" is required (not null)
            CustomFields = customFields ??
                           throw new InvalidDataException(
                               "CustomFields is a required property for ParserParameters and cannot be null");

            // use default value if no "UseRDFa" provided
            UseRdFa = useRdFa ?? true;

            // use default value if no "UseMicrodata" provided
            UseMicrodata = useMicrodata ?? true;
        }

        /// <summary>
        /// Gets or sets CustomFields
        /// </summary>
        [DataMember(Name = "customFields")]
        public List<ParserParametersCustomFields> CustomFields { get; set; }

        /// <summary>
        /// Gets or sets owner id
        /// </summary>
        [DataMember(Name = "ownerId")]
        [Required]
        [PartitionKey]
        public string OwnerId
        {
            get => PartitionKey;
            set => PartitionKey = value;
        }

        /// <summary>
        /// Gets or sets parser id in free text unique for specified owner
        /// </summary>
        [DataMember(Name = "parserId")]
        [Required]
        public string ParserId
        {
            get => RowKey;
            set => RowKey = value;
        }

        /// <summary>
        /// Gets or sets use Microdata attributes for parsing metadata
        /// </summary>
        [DataMember(Name = "useMicrodata")]
        public bool? UseMicrodata { get; set; }

        /// <summary>
        /// Gets or sets use RDFa attributes for parsing metadata.
        /// </summary>
        [DataMember(Name = "useRDFa")]
        public bool? UseRdFa { get; set; }

        /// <summary>Compare objects equality</summary>
        /// <param name="left">Left part of expression.</param>
        /// <param name="right">Right part of expression.</param>
        public static bool operator ==(ParserParameters left, ParserParameters right)
        {
            return Equals(left, right);
        }

        /// <summary>Compare objects unequality</summary>
        /// <param name="left">Left part of expression.</param>
        /// <param name="right">Right part of expression.</param>
        public static bool operator !=(ParserParameters left, ParserParameters right)
        {
            return !Equals(left, right);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ParserParameters)obj);
        }

        /// <summary>
        /// Returns true if ParserParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of ParserParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParserParameters other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return
                (
                    (OwnerId == other.OwnerId) ||
                    ((OwnerId != null) &&
                     OwnerId.Equals(other.OwnerId))) &&
                (
                    (ParserId == other.ParserId) ||
                    ((ParserId != null) &&
                     ParserId.Equals(other.ParserId))) &&
                (
                    (UseRdFa == other.UseRdFa) ||
                    ((UseRdFa != null) &&
                     UseRdFa.Equals(other.UseRdFa))) &&
                (
                    (UseMicrodata == other.UseMicrodata) ||
                    ((UseMicrodata != null) &&
                     UseMicrodata.Equals(other.UseMicrodata))) &&
                (
                    (CustomFields == other.CustomFields) ||
                    ((CustomFields != null) &&
                     CustomFields.SequenceEqual(other.CustomFields)));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked
            {
                var hash = 41;

                // Suitable nullity checks etc, of course :)
                if (OwnerId != null)
                {
                    hash = (hash * 59) + OwnerId.GetHashCode();
                }

                if (ParserId != null)
                {
                    hash = (hash * 59) + ParserId.GetHashCode();
                }

                if (UseRdFa != null)
                {
                    hash = (hash * 59) + UseRdFa.GetHashCode();
                }

                if (UseMicrodata != null)
                {
                    hash = (hash * 59) + UseMicrodata.GetHashCode();
                }

                if (CustomFields != null)
                {
                    hash = (hash * 59) + CustomFields.GetHashCode();
                }

                return hash;
            }
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParserParameters {\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  ParserId: ").Append(ParserId).Append("\n");
            sb.Append("  UseRDFa: ").Append(UseRdFa).Append("\n");
            sb.Append("  UseMicrodata: ").Append(UseMicrodata).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }
}