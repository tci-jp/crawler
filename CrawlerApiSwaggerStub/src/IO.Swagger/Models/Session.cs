/*
 * Crawler API
 *
 * API for crawling web pages and searching in crowled result
 *
 * OpenAPI spec version: 1.0.0
 * Contact: zakhar_amirov@dectech.tokyo
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// information about crawling session.
    /// </summary>
    [DataContract]
    public partial class Session :  IEquatable<Session>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Session" /> class.
        /// </summary>
        /// <param name="Id">session id.</param>
        /// <param name="Uris">array of URIs used to start crawling and states of crawling.</param>
        public Session(string Id = null, List<SessionUris> Uris = null)
        {
            this.Id = Id;
            this.Uris = Uris;
            
        }

        /// <summary>
        /// session id
        /// </summary>
        /// <value>session id</value>
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// array of URIs used to start crawling and states of crawling
        /// </summary>
        /// <value>array of URIs used to start crawling and states of crawling</value>
        [DataMember(Name="uris")]
        public List<SessionUris> Uris { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Session {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uris: ").Append(Uris).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Session)obj);
        }

        /// <summary>
        /// Returns true if Session instances are equal
        /// </summary>
        /// <param name="other">Instance of Session to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Session other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Uris == other.Uris ||
                    this.Uris != null &&
                    this.Uris.SequenceEqual(other.Uris)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Uris != null)
                    hash = hash * 59 + this.Uris.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Session left, Session right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Session left, Session right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
