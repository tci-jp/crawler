// <copyright file="ParserParameters.cs" company="DECTech.Tokyo">
// Copyright (c) DECTech.Tokyo. All rights reserved.
// </copyright>

/*
 * Crawler API
 *
 * API for crawling web pages and searching in crowled result
 *
 * OpenAPI spec version: 1.0.0
 * Contact: zakhar_amirov@dectech.tokyo
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace CrawlerLib.Azure
{
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Text;
    using Data;
    using global::Azure.Storage;

    /// <summary>
    /// Parameters for parsing pages.
    /// </summary>
    [Table("parserParameters")]
    public class ParserParameters : ComplexTableEntity, IParserParameters
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParserParameters" /> class.
        /// </summary>
        public ParserParameters()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ParserParameters"/> class.
        /// </summary>
        /// <param name="param">Parameters to create from.</param>
        public ParserParameters(IParserParameters param)
            : this(param.OwnerId, param.ParserId)
        {
            UseMicrodata = param.UseMicrodata;
            UseRdFa = param.UseRdFa;
            UseJson = param.UseJson;
            CustomFields = param.CustomFields?.Select(cf => new ParserParametersXPathCustomFields(cf)).ToList();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ParserParameters" /> class.
        /// </summary>
        /// <param name="ownerId">owner id (required).</param>
        /// <param name="parserId">parser id in free text unique for specified owner (required).</param>
        public ParserParameters(
            string ownerId = null,
            string parserId = null)
            : base(ownerId, parserId)
        {
        }

        /// <summary>
        /// Gets or sets CustomFields
        /// </summary>
        public IList<ParserParametersXPathCustomFields> CustomFields { get; set; }

        /// <summary>
        /// Gets or sets owner id
        /// </summary>
        [PartitionKey]
        public string OwnerId
        {
            get => PartitionKey;
            set => PartitionKey = value;
        }

        /// <summary>
        /// Gets or sets parser id in free text unique for specified owner
        /// </summary>
        public string ParserId
        {
            get => RowKey;
            set => RowKey = value;
        }

        /// <summary>
        /// Gets or sets use ld+json metadata
        /// </summary>
        public bool? UseJson { get; set; }

        /// <summary>
        /// Gets or sets use Microdata attributes for parsing metadata
        /// </summary>
        public bool? UseMicrodata { get; set; }

        /// <summary>
        /// Gets or sets use RDFa attributes for parsing metadata.
        /// </summary>
        public bool? UseRdFa { get; set; }

        /// <inheritdoc />
        IEnumerable<IParserParametersXPathCustomFields> IParserParameters.CustomFields => CustomFields;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParserParameters {\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  ParserId: ").Append(ParserId).Append("\n");
            sb.Append("  UseRDFa: ").Append(UseRdFa).Append("\n");
            sb.Append("  UseMicrodata: ").Append(UseMicrodata).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }
}