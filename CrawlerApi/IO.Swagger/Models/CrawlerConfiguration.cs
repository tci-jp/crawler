// <copyright file="CrawlerConfiguration.cs" company="DECTech.Tokyo">
// Copyright (c) DECTech.Tokyo. All rights reserved.
// </copyright>

/*
 * Crawler API
 *
 * API for crawling web pages and searching in crowled result
 *
 * OpenAPI spec version: 1.0.0
 * Contact: zakhar_amirov@dectech.tokyo
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace CrawlerApi.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.IO;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;
    using CrawlerLib.Data;
    using Newtonsoft.Json;

    /// <summary>
    /// crawling parameters
    /// </summary>
    [DataContract]
    public class CrawlerConfiguration : IEquatable<CrawlerConfiguration>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrawlerConfiguration" /> class.
        /// </summary>
        /// <param name="ownerId">id used to keep history of requests and blobs collection (required).</param>
        /// <param name="parserId">Custom parser Id</param>
        /// <param name="uris">array of URIs to crawl (required).</param>
        /// <param name="cancellationTime">Time in seconds after which session processing should be stopped. Default is UTC 30 min if null or empty.</param>
        public CrawlerConfiguration(string ownerId = null, string parserId = null, List<UriParameter> uris = null, long? cancellationTime = null)
        {
            ParserId = parserId;

            // to ensure "OwnerId" is required (not null)
            OwnerId =
                ownerId ??
                throw new InvalidDataException(
                    "OwnerId is a required property for CrawlerConfiguration and cannot be null");

            // to ensure "Uris" is required (not null)
            Uris = uris ??
                   throw new InvalidDataException(
                       "Uris is a required property for CrawlerConfiguration and cannot be null");

            CancellationTime = cancellationTime ?? 30 * 60;
        }

        /// <summary>
        /// Gets cancellation time interval in seconds after which session should stop. Unlimited if null.
        /// </summary>
        public long? CancellationTime { get; }

        /// <summary>
        /// Gets id used to keep history of requests and blobs collection
        /// </summary>
        [DataMember(Name = "ownerId")]
        [Required]
        public string OwnerId { get; }

        /// <summary>
        /// Gets or Sets ParserId for parsing settings
        /// </summary>
        [DataMember(Name = "parserId")]
        public string ParserId { get; }

        /// <summary>
        /// Gets array of URIs to crawl
        /// </summary>
        [DataMember(Name = "uris")]
        [Required]
        public List<UriParameter> Uris { get; }

        /// <summary>Compare objects equality</summary>
        /// <param name="left">Left part of expression.</param>
        /// <param name="right">Right part of expression.</param>
        public static bool operator ==(CrawlerConfiguration left, CrawlerConfiguration right)
        {
            return Equals(left, right);
        }

        /// <summary>Compare objects unequality</summary>
        /// <param name="left">Left part of expression.</param>
        /// <param name="right">Right part of expression.</param>
        public static bool operator !=(CrawlerConfiguration left, CrawlerConfiguration right)
        {
            return !Equals(left, right);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CrawlerConfiguration)obj);
        }

        /// <summary>
        /// Returns true if CrawlerConfiguration instances are equal
        /// </summary>
        /// <param name="other">Instance of CrawlerConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrawlerConfiguration other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return
                (
                    (OwnerId == other.OwnerId) ||
                    ((OwnerId != null) &&
                     OwnerId.Equals(other.OwnerId))) &&
                (
                    (Uris == other.Uris) ||
                    ((Uris != null) &&
                     Uris.SequenceEqual(other.Uris)));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = CancellationTime.GetHashCode();
                hashCode = (hashCode * 397) ^ (OwnerId != null ? OwnerId.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (ParserId != null ? ParserId.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (Uris != null ? Uris.GetHashCode() : 0);
                return hashCode;
            }
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CrawlerConfiguration {\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Uris: ").Append(Uris).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }
}