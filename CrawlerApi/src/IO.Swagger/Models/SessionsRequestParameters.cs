/*
 * Crawler API
 *
 * API for crawling web pages and searching in crowled result
 *
 * OpenAPI spec version: 1.0.0
 * Contact: zakhar_amirov@dectech.tokyo
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// parameters to request a collection of crawler session information
    /// </summary>
    [DataContract]
    public partial class SessionsRequestParameters :  IEquatable<SessionsRequestParameters>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsRequestParameters" /> class.
        /// </summary>
        /// <param name="OwnerId">owner id. Ignored if Page.requestId is used. (required).</param>
        /// <param name="SessionIds">array of session ids to get information about. if missing or empty list reqest all sessions owned. Ignored if Page.requestId is used..</param>
        /// <param name="Page">Page.</param>
        public SessionsRequestParameters(string OwnerId = null, List<string> SessionIds = null, Page Page = null)
        {
            // to ensure "OwnerId" is required (not null)

            this.OwnerId = OwnerId ?? throw new InvalidDataException("OwnerId is a required property for SessionsRequestParameters and cannot be null");
            this.SessionIds = SessionIds;
            this.Page = Page;
            
        }

        /// <summary>
        /// owner id. Ignored if Page.requestId is used.
        /// </summary>
        /// <value>owner id. Ignored if Page.requestId is used.</value>
        [DataMember(Name="ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// array of session ids to get information about. if missing or empty list reqest all sessions owned. Ignored if Page.requestId is used.
        /// </summary>
        /// <value>array of session ids to get information about. if missing or empty list reqest all sessions owned. Ignored if Page.requestId is used.</value>
        [DataMember(Name="sessionIds")]
        public List<string> SessionIds { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name="page")]
        public Page Page { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SessionsRequestParameters {\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  SessionIds: ").Append(SessionIds).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((SessionsRequestParameters)obj);
        }

        /// <summary>
        /// Returns true if SessionsRequestParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of SessionsRequestParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionsRequestParameters other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OwnerId == other.OwnerId ||
                    OwnerId != null &&
                    OwnerId.Equals(other.OwnerId)
                ) && 
                (
                    SessionIds == other.SessionIds ||
                    SessionIds != null &&
                    SessionIds.SequenceEqual(other.SessionIds)
                ) && 
                (
                    Page == other.Page ||
                    Page != null &&
                    Page.Equals(other.Page)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                var hash = 41;
                // Suitable nullity checks etc, of course :)
                if (OwnerId != null)
                    hash = hash * 59 + OwnerId.GetHashCode();
                if (SessionIds != null)
                    hash = hash * 59 + SessionIds.GetHashCode();
                if (Page != null)
                    hash = hash * 59 + Page.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(SessionsRequestParameters left, SessionsRequestParameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SessionsRequestParameters left, SessionsRequestParameters right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
