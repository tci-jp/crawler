/*
 * Crawler API
 *
 * API for crawling web pages and searching in crowled result
 *
 * OpenAPI spec version: 1.0.0
 * Contact: zakhar_amirov@dectech.tokyo
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CrawlerConfigurationUris :  IEquatable<CrawlerConfigurationUris>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrawlerConfigurationUris" /> class.
        /// </summary>
        /// <param name="Uri">Uri (required).</param>
        /// <param name="ParserId">ParserId.</param>
        public CrawlerConfigurationUris(string Uri = null, string ParserId = null)
        {
            // to ensure "Uri" is required (not null)
            if (Uri == null)
            {
                throw new InvalidDataException("Uri is a required property for CrawlerConfigurationUris and cannot be null");
            }
            else
            {
                this.Uri = Uri;
            }
            this.ParserId = ParserId;
            
        }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name="uri")]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets ParserId
        /// </summary>
        [DataMember(Name="parserId")]
        public string ParserId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CrawlerConfigurationUris {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  ParserId: ").Append(ParserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CrawlerConfigurationUris)obj);
        }

        /// <summary>
        /// Returns true if CrawlerConfigurationUris instances are equal
        /// </summary>
        /// <param name="other">Instance of CrawlerConfigurationUris to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrawlerConfigurationUris other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Uri == other.Uri ||
                    this.Uri != null &&
                    this.Uri.Equals(other.Uri)
                ) && 
                (
                    this.ParserId == other.ParserId ||
                    this.ParserId != null &&
                    this.ParserId.Equals(other.ParserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Uri != null)
                    hash = hash * 59 + this.Uri.GetHashCode();
                if (this.ParserId != null)
                    hash = hash * 59 + this.ParserId.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CrawlerConfigurationUris left, CrawlerConfigurationUris right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CrawlerConfigurationUris left, CrawlerConfigurationUris right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
