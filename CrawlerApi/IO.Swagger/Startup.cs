// <copyright file="Startup.cs" company="DECTech.Tokyo">
// Copyright (c) DECTech.Tokyo. All rights reserved.
// </copyright>

/*
 * Crawler API
 *
 * API for crawling web pages and searching in crowled result
 *
 * OpenAPI spec version: 1.0.0
 * Contact: zakhar_amirov@dectech.tokyo
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace CrawlerApi
{
    using System;
    using System.IO;
    using System.Xml.XPath;
    using System.Xml.Xsl;
    using Azure.Storage;
    using CrawlerLib;
    using CrawlerLib.Azure;
    using CrawlerLib.Data;
    using CrawlerLib.Grabbers;
    using CrawlerLib.Metadata;
    using CrawlerLib.Queue;
    using JetBrains.Annotations;
    using Microsoft.ApplicationInsights;
    using Microsoft.ApplicationInsights.Extensibility;
    using Microsoft.AspNetCore.Builder;
    using Microsoft.AspNetCore.Hosting;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Logging;
    using Newtonsoft.Json.Serialization;
    using Swashbuckle.Swagger.Model;
    using Swashbuckle.SwaggerGen.Annotations;

    /// <summary>
    /// Startup preparations.
    /// </summary>
    [UsedImplicitly]
    public class Startup
    {
        private readonly IHostingEnvironment hostingEnv;

        /// <summary>
        /// Initializes a new instance of the <see cref="Startup" /> class.
        /// </summary>
        /// <param name="env">Hosting Environment.</param>
        public Startup(IHostingEnvironment env)
        {
            hostingEnv = env;

            var builder = new ConfigurationBuilder()
                .SetBasePath(env.ContentRootPath)
                .AddJsonFile("appsettings.json", true, true)
                .AddJsonFile($"appsettings.{env.EnvironmentName}.json", true)
                .AddEnvironmentVariables();
            Configuration = builder.Build();
        }

        /// <summary>
        /// Gets app configuration.
        /// </summary>
        public IConfigurationRoot Configuration { get; }

        /// <summary>
        /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        /// </summary>
        /// <param name="app">Application Builder.</param>
        /// <param name="env">Hosting Environment.</param>
        /// <param name="loggerFactory">Logger.</param>
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            loggerFactory.AddConsole(Configuration.GetSection("Logging"));
            loggerFactory.AddDebug();

            app.UseMvc();

            app.UseDefaultFiles();
            app.UseStaticFiles();

            app.UseSwagger();
            app.UseSwaggerUi();
        }

        /// <summary>
        /// This method gets called by the runtime. Use this method to add services to the container.
        /// </summary>
        /// <param name="services">Asp.NET Services.</param>
        public void ConfigureServices(IServiceCollection services)
        {
            // Add framework services.
            services.AddMvc()
                    .AddJsonOptions(
                        opts =>
                        {
                            opts.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
                        });
            services.AddApplicationInsightsTelemetry(Configuration);

            var storage = new DataStorage(Configuration["CrawlerStorageConnectionString"]);

            var azureIndexedSearch = new AzureIndexedSearch(
                storage,
                Configuration["SearchServiceName"],
                Configuration["SearchServiceAdminApiKey"],
                Configuration["TextSearchIndexName"],
                Configuration["MetaSearchIndexName"]);

            var crawlerStorage = new AzureCrawlerStorage(storage, azureIndexedSearch);

            var queue = new MemoryParserJobsQueue(crawlerStorage);

            services.AddSingleton<IParserJobsQueue>(queue);
            services.AddSingleton<IDataStorage>(storage);
            services.AddSingleton<IBlobSearcher>(azureIndexedSearch);
            services.AddSingleton<ICrawlerStorage>(crawlerStorage);

            var config = new Configuration
            {
                Storage = crawlerStorage,
                Queue = queue,
                Logger = new AppInsLogger(new TelemetryClient(new TelemetryConfiguration(Configuration["ApplicationInsightsKey"]))),
                Depth = 0,
                HostDepth = 0,
                MetadataExtractors = new IMetadataExtractor[]
                                                  {
                                                      new RdfaMetadataExtractor(),
                                                      new MicrodataMetadataExtractor()
                                                  }
            };

            config.HttpGrabber = new WebDriverHttpGrabber(config);

            var crawler = new Crawler(config);
            crawler.RunParserWorkers(Configuration.GetValue<int?>("CrawlerWorkers") ?? 4);

            services.AddSingleton<ICrawler>(crawler);

            services.AddSwaggerGen();
            services.ConfigureSwaggerGen(options =>
            {
                options.SingleApiVersion(new Info
                {
                    Version = "v1",
                    Title = "CrawlerApi",
                    Description = "CrawlerApi (ASP.NET Core 2.0)"
                });

                options.DescribeAllEnumsAsStrings();

                var comments =
                    new XPathDocument(
                        $"{AppContext.BaseDirectory}{Path.DirectorySeparatorChar}{hostingEnv.ApplicationName}.xml");
                options.OperationFilter<XmlCommentsOperationFilter>(comments);
                options.ModelFilter<XmlCommentsModelFilter>(comments);
            });
        }
    }
}